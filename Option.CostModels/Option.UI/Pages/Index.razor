@page "/"
@using Option.CostModels;
@using Option.UI.Data;
@using SymbolManagerNamespace;
@using YahooFinanceApi;
<style>
    .container {
        max-width: 1000px;
        margin: 0 auto;
        padding: 20px;
    }

    .form-group {
        margin-bottom: 15px;
    }

    .chart-container {
        margin-bottom: 20px;
    }

    .table {
        width: 100%;
        border-collapse: collapse;
        margin-bottom: 20px;
    }

        .table th,
        .table td {
            padding: 10px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        .table th {
            background-color: #f5f5f5;
        }

    .btn-primary {
        background-color: #007bff;
        color: #fff;
        border: none;
    }

        .btn-primary:hover {
            background-color: #0069d9;
        }

</style>
<PageTitle>Options Price</PageTitle>
<div class="container">
    <div class="form-group">
        <h3>Символ</h3>
        <select class="form-control" @onchange="SymbolSelected">
            @foreach (SymbolsEnum symbol in Enum.GetValues(typeof(SymbolsEnum)))
            {
                <option value="@symbol">@symbol</option>
            }
        </select>
    </div>

    <div>
        <h3>Графік акції</h3>
    </div>
    <div class="chart-container">
        <EditForm Model="@model" OnValidSubmit="@HandleValidSubmit">
            <div>
                <div class="form-group">
                    <label for="startDate">Від:</label>
                    <InputDate @bind-Value="model.startDate" id="startDate" class="form-control" />
                </div>
                <div class="form-group">
                    <label for="endDate">До:</label>
                    <InputDate @bind-Value="model.endDate" id="endDate" class="form-control" />
                </div>
                <br />
                <button @onclick="Zoom" class="btn btn-primary">Оновити графік</button>
                <SfChart>
                    <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime" ZoomFactor="1"></ChartPrimaryXAxis>
                    <ChartPrimaryYAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Double" ZoomFactor="1"></ChartPrimaryYAxis>
                    <ChartSeriesCollection>
                        <ChartSeries DataSource="@listZoom" XName="DateTime" YName="Close" Type="ChartSeriesType.Line"></ChartSeries>
                    </ChartSeriesCollection>
                </SfChart>

                <div class="form-group">
                    <label for="S">S - Ціна акції</label>
                    <InputNumber @bind-Value="@model.S" disabled class="form-control" />
                </div>
                <div class="form-group">
                    <label for="K">K - Ціна страйку(виконання)</label>
                    <InputNumber @bind-Value="@model.K" class="form-control" />
                </div>
                <div class="form-group">
                    <label for="T">T - Дата виконання опціону</label>
                    <InputDate @bind-Value="model.T" id="StrikeDate" class="form-control" />
                </div>
                <div class="form-group">
                    <label for="r">r - Безризикова відсоткова ставка (у %)</label>
                    <InputNumber @bind-Value="@model.r" class="form-control" />
                </div>
                <div class="form-group">
                    <label for="sigma">sigma - Волатильність символу</label>
                    <InputNumber @bind-Value="@model.sigma" disabled class="form-control" />
                </div>
                <br />
                <button type="submit" class="btn btn-primary">Обрахувати</button>
            </div>
        </EditForm>

    </div>
    @if (model.BSMModel != null && model.CRRModel != null && model.LevyModel != null)
    {
        <h4>Результати Моделей</h4>
        <div>
            <label>
                <input type="checkbox" @bind="showFullNumbers"> Показати додаткові показники
            </label>
        </div>
        <table class="table">
            <thead>
                <tr>
                    <th>Назва моделі</th>
                    <th>Call Опціон</th>
                    <th>Put Опціон</th>
                    @if (showFullNumbers)
                    {
                        <th>Delta</th>
                        <th>Gamma</th>
                        <th>Vega</th>
                        <th>Theta</th>
                        <th>Rho</th>
                    }
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>Модель Блека-Скоулза </td>
                    <td>@FormatValue(model.BSMModel.CallPrice)</td>
                    <td>@FormatValue(model.BSMModel.PutPrice)</td>
                    @if (showFullNumbers)
                    {
                        <td>@FormatValue(model.BSMModel.Delta)</td>
                        <td>@FormatValue(model.BSMModel.Gamma)</td>
                        <td>@FormatValue(model.BSMModel.Vega)</td>
                        <td>@FormatValue(model.BSMModel.Theta)</td>
                        <td>@FormatValue(model.BSMModel.Rho)</td>
                    }
                </tr>
                <tr>
                    <td>Модель Кокса-Росса</td>
                    <td>@FormatValue(model.CRRModel.CallPrice)</td>
                    <td>@FormatValue(model.CRRModel.PutPrice)</td>
                    @if (showFullNumbers)
                    {
                        <td>@FormatValue(model.CRRModel.Delta)</td>
                        <td>@FormatValue(model.CRRModel.Gamma)</td>
                        <td>@FormatValue(model.CRRModel.Vega)</td>
                        <td>@FormatValue(model.CRRModel.Theta)</td>
                        <td>@FormatValue(model.CRRModel.Rho)</td>
                    }
                </tr>
                <tr>
                    <td>Модель Леві</td>
                    <td>@FormatValue(model.LevyModel.CallPrice)</td>
                    <td>@FormatValue(model.LevyModel.PutPrice)</td>
                    @if (showFullNumbers)
                    {
                        <td>@FormatValue(model.LevyModel.Delta)</td>
                        <td>@FormatValue(model.LevyModel.Gamma)</td>
                        <td>@FormatValue(model.LevyModel.Vega)</td>
                        <td>@FormatValue(model.LevyModel.Theta)</td>
                        <td>@FormatValue(model.LevyModel.Rho)</td>
                    }
                </tr>
            </tbody>
        </table>


    }
</div>




@code {
    protected OptionPriceVM model = new() { startDate = DateTime.Now.AddYears(-10), endDate = DateTime.Today };
    protected SymbolsEnum symbol;
    IList<Candle> listBase;
    IList<Candle> listZoom;
    SymbolManager symbolManager = new SymbolManager();

    protected async Task SymbolSelected(ChangeEventArgs e)
    {
        if (Enum.TryParse(e.Value.ToString(), out SymbolsEnum symbol))
        {
            this.symbol = symbol;
        }
        listBase = await symbolManager.ReadHistoricalDataAsync(symbol);
        listZoom = listBase.Where(obj => obj.DateTime >= model.startDate && obj.DateTime <= model.endDate).ToList();
        model.sigma = CalculateVolatility(listZoom.ToList(), model.startDate, model.endDate);
        model.S = (double)listZoom.Last().Close;
    }
    protected override async Task OnInitializedAsync()
    {
        listBase = await symbolManager.ReadHistoricalDataAsync(SymbolsEnum.AAPL);
        listZoom = listBase.Where(obj => obj.DateTime >= model.startDate && obj.DateTime <= model.endDate).ToList();
        model.sigma = CalculateVolatility(listZoom.ToList(), model.startDate, model.endDate);
        model.S = (double)listZoom.Last().Close;
        model.BSMModel = null;
        model.CRRModel = null;
        model.LevyModel = null;
    }
    protected async void Zoom()
    {
        listZoom = listBase.Where(obj => obj.DateTime >= model.startDate && obj.DateTime <= model.endDate).ToList();
        model.sigma = CalculateVolatility(listZoom.ToList(), model.startDate, model.endDate);
        model.S = (double)listZoom.Last().Close;
    }
    protected async void HandleValidSubmit()
    {
        var S = model.S;
        var K = model.K;
        var t = (model.T - model.endDate).TotalDays / 365.25;
        var r = model.r / 100;
        var sigma = model.sigma;

        model.BSMModel = new ModelResult()
            {
                CallPrice = BSMModel.CallValue(S, K, t, r, sigma),
                PutPrice = BSMModel.PutCallParity(S, K, t, r, sigma),
                Delta = BSMModel.DeltaCall(S, K, t, r, sigma),
                Gamma = BSMModel.GammaCall(S, K, t, r, sigma),
                Vega = BSMModel.VegaCall(S, K, t, r, sigma),
                Theta = BSMModel.ThetaCall(S, K, t, r, sigma),
                Rho = BSMModel.RhoCall(S, K, t, r, sigma)
            };
        model.CRRModel = new ModelResult()
            {
                CallPrice = CRRModel.CallValue(S, K, t, r, sigma),
                PutPrice = CRRModel.PutCallParity(S, K, t, r, sigma),
                Delta = CRRModel.DeltaCall(S, K, t, r, sigma),
                Gamma = CRRModel.GammaCall(S, K, t, r, sigma),
                Vega = CRRModel.VegaCall(S, K, t, r, sigma),
                Theta = CRRModel.ThetaCall(S, K, t, r, sigma),
                Rho = CRRModel.RhoCall(S, K, t, r, sigma)
            };
        var levy = new LevyModel();
        model.LevyModel = new ModelResult()
            {
                CallPrice = levy.CallValue(S, K, t, r, sigma),
                PutPrice = levy.PutValue(S, K, t, r, sigma),
                Delta = levy.DeltaCall(S, K, t, r, sigma),
                Gamma = levy.GammaCall(S, K, t, r, sigma),
                Vega = levy.VegaCall(S, K, t, r, sigma),
                Theta = levy.ThetaCall(S, K, t, r, sigma),
                Rho = levy.RhoCall(S, K, t, r, sigma)
            };
    }

    public double CalculateVolatility(List<Candle> candles, DateTime startDate, DateTime endDate)
    {
        // Перевірка наявності даних
        if (candles == null || candles.Count == 0)
        {
            throw new ArgumentException("The candles list is empty or null.");
        }

        // Перевірка відповідності дат
        if (startDate >= endDate)
        {
            throw new ArgumentException("The start date must be earlier than the end date.");
        }

        // Відбір свічок в заданому проміжку дат
        var selectedCandles = candles
            .Where(candle => candle.DateTime >= startDate && candle.DateTime <= endDate)
            .ToList();

        // Перевірка кількості свічок
        if (selectedCandles.Count < 2)
        {
            throw new ArgumentException("Not enough candles to calculate volatility for the specified date range.");
        }

        // Обчислення логарифмічних доходностей
        var returns = new List<double>();
        for (int i = 1; i < selectedCandles.Count; i++)
        {
            var currentCandle = selectedCandles[i];
            var previousCandle = selectedCandles[i - 1];
            var logReturn = Math.Log((double)(currentCandle.Close / previousCandle.Close));
            returns.Add(logReturn);
        }

        // Обчислення середнього значення
        double averageReturn = returns.Average();

        // Обчислення середнього квадратичного відхилення
        double sumOfSquaredDifferences = returns
            .Select(ret => (ret - averageReturn) * (ret - averageReturn))
            .Sum();

        double volatility = Math.Sqrt(sumOfSquaredDifferences / (returns.Count - 1));

        return volatility;
    }
    private bool showFullNumbers = false;

    private string FormatValue(double value)
    {
        return showFullNumbers ? value.ToString() : Math.Round(value, 2).ToString();
    }
}